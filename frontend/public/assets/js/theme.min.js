"use strict";

(function () {
    // SVG Fallback for IE
    var svgs = document.querySelectorAll(".svg-shim > svg");
    if (/MSIE \d|Trident.*rv:/.test(navigator.userAgent)) {
        svgs.forEach(function (svg) {
            var color = window.getComputedStyle(svg, null).getPropertyValue("color");
            var str = new XMLSerializer().serializeToString(svg);
            str = "data:image/svg+xml," + str
                .replace(/currentColor/g, color)
                .replace(/\s\s+/g, " ")
                .replace(/</g, "%3C")
                .replace(/>/g, "%3E")
                .replace(/#/g, "%23")
                .replace(/"/g, "'");
            var img = document.createElement("img");
            img.src = str;
            img.alt = "...";
            var parent = svg.parentNode;
            parent.appendChild(img);
            parent.removeChild(svg);
        });
    }
})();

// AOS init
if (typeof AOS !== "undefined") {
    AOS.init({
        duration: 700,
        easing: "ease-out-quad",
        once: true,
        startEvent: "load"
    });
}

// Choices init
(function () {
    var elements = document.querySelectorAll("[data-choices]");
    if (typeof Choices !== "undefined" && elements.length) {
        elements.forEach(function (el) {
            var opts = el.dataset.choices ? JSON.parse(el.dataset.choices) : {};
            var defaults = {
                searchEnabled: false,
                classNames: {
                    containerInner: el.className,
                    list: "none",
                    listSingle: "none",
                    listDropdown: "dropdown-menu",
                    itemChoice: "dropdown-item",
                    activeState: "show",
                    selectedState: "active"
                }
            };
            new Choices(el, Object.assign(defaults, opts));
        });
    }
})();

// CountUp init
(function () {
    var elements = document.querySelectorAll('[data-toggle="countup"]');

    function initCountUp(el) {
        var from = el.dataset.from ? +el.dataset.from : null;
        var to = el.dataset.to ? +el.dataset.to : null;
        var decimals = el.dataset.decimals ? +el.dataset.decimals : null;
        var duration = el.dataset.duration ? +el.dataset.duration : null;
        var options = el.dataset.options ? JSON.parse(el.dataset.options) : null;
        var cu = new CountUp(el, from, to, decimals, duration, options);
        if (!cu.error) {
            cu.start();
            el.classList.add("counted");
        } else {
            console.error(cu.error);
        }
    }

    if (typeof CountUp !== "undefined" && elements.length) {
        elements.forEach(function (el) {
            if (el.getAttribute("data-aos-id") !== "countup:in") initCountUp(el);
        });

        document.addEventListener("aos:in:countup:in", function (e) {
            if (e.detail instanceof Element) {
                initCountUp(e.detail);
            } else {
                document.querySelectorAll('.aos-animate[data-aos-id="countup:in"]:not(.counted)')
                    .forEach(initCountUp);
            }
        });
    }
})();

// Countdown init
(function () {
    var countdowns = document.querySelectorAll(".countdown");
    countdowns.forEach(function (el) {
        var targetTime = new Date(el.dataset.countdown).getTime();
        if (isNaN(targetTime)) return;

        var daysEl = el.querySelector(".countdown-days .countdown-value");
        var hoursEl = el.querySelector(".countdown-hours .countdown-value");
        var minutesEl = el.querySelector(".countdown-minutes .countdown-value");
        var secondsEl = el.querySelector(".countdown-seconds .countdown-value");

        setInterval(function () {
            var now = new Date().getTime();
            var diff = parseInt((targetTime - now) / 1000);
            if (diff >= 0) {
                var days = parseInt(diff / 86400); diff %= 86400;
                var hours = parseInt(diff / 3600); diff %= 3600;
                var mins = parseInt(diff / 60);
                var secs = diff % 60;
                if (daysEl) daysEl.textContent = days;
                if (hoursEl) hoursEl.textContent = hours < 10 ? "0" + hours : hours;
                if (minutesEl) minutesEl.textContent = mins < 10 ? "0" + mins : mins;
                if (secondsEl) secondsEl.textContent = secs < 10 ? "0" + secs : secs;
            }
        }, 1000);
    });
})();

// Navbar hover dropdown
(function () {
    var dropdowns = document.querySelectorAll(".navbar-nav .dropdown, .navbar-nav .dropright");
    dropdowns.forEach(function (dropdown) {
        var menu = dropdown.querySelector(".dropdown-menu");

        dropdown.addEventListener("mouseenter", function () {
            if (window.innerWidth >= 992) {
                menu.classList.add("showing");
                setTimeout(function () {
                    menu.classList.remove("showing");
                    menu.classList.add("show");
                }, 1);
            }
        });

        ["mouseleave", "click"].forEach(function (eventType) {
            dropdown.addEventListener(eventType, function (e) {
                if (window.innerWidth >= 992 && menu.classList.contains("show")) {
                    if (eventType === "click" && e.target.closest(".dropdown-menu form")) return;
                    menu.classList.add("showing");
                    menu.classList.remove("show");
                    setTimeout(function () {
                        menu.classList.remove("showing");
                    }, 200);
                }
            });
        });
    });

    // Quantity increment/decrement
    document.querySelectorAll(".quantity-plus, .quantity-minus").forEach(function (btn) {
        btn.addEventListener("click", function (e) {
            var isMinus = e.target.closest(".quantity-minus");
            var input = e.target.closest(".quantity-increment").querySelector("input");
            if (input) isMinus ? input.stepDown() : input.stepUp();
        });
    });
})();

// Dropzone init
(function () {
    var elements = document.querySelectorAll("[data-dropzone]");
    if (typeof Dropzone !== "undefined" && elements.length) {
        Dropzone.autoDiscover = false;
        Dropzone.thumbnailWidth = null;
        Dropzone.thumbnailHeight = null;
        elements.forEach(function (el) {
            var lastFile;
            var opts = el.dataset.dropzone ? JSON.parse(el.dataset.dropzone) : {};
            var defaults = {
                previewsContainer: el.querySelector(".dz-preview"),
                previewTemplate: el.querySelector(".dz-preview").innerHTML,
                init: function () {
                    this.on("addedfile", function (file) {
                        if (opts.maxFiles === 1 && lastFile) this.removeFile(lastFile);
                        lastFile = file;
                    });
                }
            };
            el.querySelector(".dz-preview").innerHTML = "";
            new Dropzone(el, Object.assign(defaults, opts));
        });
    }
})();

// Fancybox (jQuery-free)
if (typeof jQuery !== "undefined" && jQuery().fancybox) {
    $.fancybox.defaults.image.preload = false;
    $.fancybox.defaults.toolbar = false;
    $.fancybox.defaults.clickContent = false;
}

// Highlight.js init
(function () {
    var elements = document.querySelectorAll(".highlight");
    if (typeof hljs !== "undefined" && elements.length) {
        elements.forEach(function (el) {
            hljs.highlightBlock(el);
        });
    }
})();

// Isotope filtering (vanilla JS version)
(function () {
    var filterButtons = document.querySelectorAll("[data-filter]");
    filterButtons.forEach(function (btn) {
        btn.addEventListener("click", function () {
            var filter = btn.dataset.filter;
            var targetSelector = btn.dataset.target;
            var target = document.querySelector(targetSelector);
            if (target && typeof Isotope !== "undefined") {
                var iso = Isotope.data(target);
                if (iso) {
                    iso.arrange({ filter: filter });
                } else {
                    new Isotope(target, { filter: filter });
                }
            }
        });
    });

    var grids = document.querySelectorAll("[data-isotope]");
    grids.forEach(function (grid) {
        if (typeof imagesLoaded !== "undefined") {
            imagesLoaded(grid, function () {
                var iso = Isotope.data(grid);
                if (iso) iso.layout();
            });
        }
    });
})();

// Mapbox Init
(function () {
    var maps = document.querySelectorAll('[data-toggle="map"]');
    if (typeof mapboxgl !== "undefined" && maps.length) {
        maps.forEach(function (el) {
            var options = el.dataset.options ? JSON.parse(el.dataset.options) : {};
            var defaults = {
                container: el,
                style: "mapbox://styles/mapbox/light-v9",
                scrollZoom: false,
                interactive: false
            };
            mapboxgl.accessToken =
                "pk.eyJ1IjoiZ29vZHRoZW1lcyIsImEiOiJjanU5eHR4N2cybDU5NGVwOHZwNGprb3E0In0.msdw9q16dh8v4azJXUdiXg";
            new mapboxgl.Map(Object.assign(defaults, options));
        });
    }
})();

// Bootstrap modal scroll fix (pure JS)
(function () {
    var modals = document.querySelectorAll(".modal");

    function lockScroll() {
        var scrollBarWidth = window.innerWidth - document.documentElement.clientWidth;
        document.documentElement.style.overflow = "hidden";
        document.body.style.paddingRight = scrollBarWidth + "px";
    }

    function unlockScroll() {
        document.documentElement.style.overflow = "";
        document.body.style.paddingRight = "";
    }

    modals.forEach(function (modal) {
        modal.addEventListener("show.bs.modal", lockScroll);
        modal.addEventListener("hidden.bs.modal", unlockScroll);
    });
})();

// Navbar togglable background change on scroll
(function () {
    var navbars = document.querySelectorAll(".navbar-togglable");
    var collapses = document.querySelectorAll(".navbar-collapse");
    var applied = false;

    function handleScroll(navbar) {
        var scroll = window.pageYOffset;
        if (scroll && !applied) {
            navbar.classList.remove("navbar-dark");
            navbar.classList.add("navbar-light", "bg-white");
            applied = true;
        } else if (!scroll) {
            navbar.classList.remove("navbar-light", "bg-white");
            navbar.classList.add("navbar-dark");
            applied = false;
        }
    }

    function lockScroll() {
        var scrollBarWidth = window.innerWidth - document.documentElement.clientWidth;
        document.documentElement.style.overflow = "hidden";
        document.body.style.paddingRight = scrollBarWidth + "px";
    }

    function unlockScroll() {
        document.documentElement.style.overflow = "";
        document.body.style.paddingRight = "";
    }

    navbars.forEach(function (navbar) {
        ["load", "scroll"].forEach(function (event) {
            window.addEventListener(event, function () {
                handleScroll(navbar);
            });
        });
    });

    collapses.forEach(function (collapse) {
        collapse.addEventListener("show.bs.collapse", lockScroll);
        collapse.addEventListener("hidden.bs.collapse", unlockScroll);
    });
})();

// Bootstrap Popover (pure JS)
document.querySelectorAll('[data-bs-toggle="popover"]').forEach(function (el) {
    new bootstrap.Popover(el);
});

// SmoothScroll
if (typeof SmoothScroll !== "undefined") {
    new SmoothScroll('[data-toggle="smooth-scroll"]', {
        header: ".navbar.fixed-top",
        offset: function (anchor, toggle) {
            return toggle.dataset.offset ? toggle.dataset.offset : 24;
        }
    });
}

// Bootstrap Tooltips
document.querySelectorAll('[data-bs-toggle="tooltip"]').forEach(function (el) {
    new bootstrap.Tooltip(el, { trigger: "hover" });
});

// Typed.js Init
(function () {
    var elements = document.querySelectorAll('[data-toggle="typed"]');
    if (typeof Typed !== "undefined" && elements.length) {
        elements.forEach(function (el) {
            var opts = el.dataset.options ? JSON.parse(el.dataset.options) : {};
            var defaults = {
                typeSpeed: 40,
                backSpeed: 40,
                backDelay: 1000,
                loop: true
            };
            new Typed(el, Object.assign(defaults, opts));
        });
    }
})();

// Quill init
(function () {
    var editors = document.querySelectorAll("[data-quill]");
    if (typeof Quill !== "undefined" && editors.length) {
        editors.forEach(function (el) {
            var opts = el.dataset.quill ? JSON.parse(el.dataset.quill) : {};
            var defaults = {
                modules: {
                    toolbar: [
                        ["bold", "italic"],
                        ["link", "blockquote", "code", "image"],
                        [{ list: "ordered" }, { list: "bullet" }]
                    ]
                },
                theme: "snow"
            };
            new Quill(el, Object.assign(defaults, opts));
        });
    }
})();

// Parallax
if (typeof Parallax !== "undefined") {
    document.querySelectorAll(".cs-parallax").forEach(function (el) {
        new Parallax(el);
    });
}
